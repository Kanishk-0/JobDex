@page "/companies/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Companies</h3>
<br />

<a href="/companies/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Add New Company
</a>
<br />
<br />

@if (Companies == null)
{
    <div class="alert alert-info">Loading Companies</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Number</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Companies in Companies)
            {
                <tr>
                    <td>@Companies.CompanyName</td>
                    <td>@Companies.CompanyEmail</td>
                    <td>@Companies.CompanyNo</td>
                    <td>@Companies.CompanyDesc</td>
                    <td>
                        <a href="/Companies/view/@Companies.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Companies/edit/@Companies.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(Companies.Id))">
                            <span class="oi oi-delete"></span>
                        </button>

                    </td>
                </tr>
            }
        </tbody>
    </table>
}




@code {
    private List<Company> Companies;

    protected async override Task OnInitializedAsync()
    {
        Companies = await _client.GetFromJsonAsync<List<Company>>($"{Endpoints.CompaniesEndpoint}");

    }

    async Task Delete(int companyId)
    {
        var company = Companies.First(q => q.Id == companyId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {company.CompanyDesc}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.CompaniesEndpoint}/{companyId}");
            await OnInitializedAsync();

        }
    }
}