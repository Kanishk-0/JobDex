@page "/applications"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Applications</h3>
<br />

<a href="/applications/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Add New Appplication
</a>
<br />
<br />

@if (Applicationss == null)
{
    <div class="alert alert-info">Loading Applications</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>User Id</th>
                <th>Staff Id</th>
                <th>Job Id</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Applications in Applicationss)
            {
                <tr>
                    <td>@Applications.UserDetailsId</td>
                    <td>@Applications.StaffDetailsId</td>
                    <td>@Applications.JobsId</td>
                    <td>
                        <a href="/Applications/view/@Applications.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Applications/edit/@Applications.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(Applications.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Applications> Applicationss;

    protected async override Task OnInitializedAsync()
    {
        Applicationss = await _client.GetFromJsonAsync<List<Applications>>($"{Endpoints.ApplicationsEndpoint}");
    }

    async Task Delete(int AppId)
    {
        var application = Applicationss.First(q => q.Id == AppId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {application.UserDetailsId}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ApplicationsEndpoint}/{AppId}");
            await OnInitializedAsync();

        }
    }
}